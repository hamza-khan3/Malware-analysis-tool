
import pefile
import pandas as pd
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler

def extract_features(file_path):
    pe = pefile.PE(file_path)
    features = {
        'NumberOfSections': len(pe.sections),
        'EntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
        'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
        'SizeOfImage': pe.OPTIONAL_HEADER.SizeOfImage,
        'NumberOfImports': sum([len(entry.imports) for entry in pe.DIRECTORY_ENTRY_IMPORT]) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
        'NumberOfExports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
        'NumberOfResources': len(pe.DIRECTORY_ENTRY_RESOURCE.entries) if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') else 0,
    }
    return features

def predict(file_path, model, scaler):
    features = extract_features(file_path)
    df = pd.DataFrame([features])
    df = scaler.transform(df)
    prediction = model.predict(df)
    return "Malicious" if prediction[0] > 0.5 else "Benign"

def main(file_path):
    model = load_model('malware_model.h5')
    scaler = StandardScaler().fit(pd.read_csv('malware_features.csv').drop('Label', axis=1))
    result = predict(file_path, model, scaler)
    print(f"The file {file_path} is classified as: {result}")

if __name__ == "__main__":
    file_path = 'path/to/test/file.exe'
    main(file_path)
