import pefile
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from tensorflow.keras.models import load_model
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from joblib import load
from train_model import build_keras_model

def extract_features(file_path):
    pe = pefile.PE(file_path)
    features = {
        'NumberOfSections': len(pe.sections),
        'EntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
        'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
        'SizeOfImage': pe.OPTIONAL_HEADER.SizeOfImage,
        'NumberOfImports': sum([len(entry.imports) for entry in pe.DIRECTORY_ENTRY_IMPORT]) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
        'NumberOfExports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
        'NumberOfResources': len(pe.DIRECTORY_ENTRY_RESOURCE.entries) if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') else 0,
    }
    return features

def predict(file_path, ensemble_model, scaler):
    features = extract_features(file_path)
    df = pd.DataFrame([features])
    df = scaler.transform(df)
    prediction = ensemble_model.predict(df)
    return "Malicious" if prediction[0] > 0.5 else "Benign"

def main(file_path):
    scaler = StandardScaler().fit(pd.read_csv('malware_features.csv').drop('Label', axis=1))
    
    # Load the individual components of the ensemble
    rf = load('rf_model.pkl')
    lr = load('lr_model.pkl')
    svm = load('svm_model.pkl')
    nn = KerasClassifier(build_fn=build_keras_model)
    nn.model = load_model('nn_model.h5')
    
    ensemble = VotingClassifier(estimators=[
        ('rf', rf), ('lr', lr), ('svm', svm), ('nn', nn)
    ], voting='soft')
    
    result = predict(file_path, ensemble, scaler)
    return result

if __name__ == "__main__":
    file_path = 'path/to/test/file.exe'
    print(main(file_path))
