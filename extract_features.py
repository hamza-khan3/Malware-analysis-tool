
import pefile
import os
import pandas as pd

def extract_features(file_path):
    try:
        pe = pefile.PE(file_path)
        features = {
            'NumberOfSections': len(pe.sections),
            'EntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
            'SizeOfImage': pe.OPTIONAL_HEADER.SizeOfImage,
            'NumberOfImports': sum([len(entry.imports) for entry in pe.DIRECTORY_ENTRY_IMPORT]) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
            'NumberOfExports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
            'NumberOfResources': len(pe.DIRECTORY_ENTRY_RESOURCE.entries) if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') else 0,
        }
        features.update(additional_pe_features(pe))
        return features
    except Exception as e:
        print(f"Error processing file {file_path}: {str(e)}")
        return {}


def calculate_entropy(data):
    import numpy as np
    probabilities = np.bincount(data) / len(data)
    entropy = -np.sum([p * np.log2(p) for p in probabilities if p != 0])
    return entropy

def additional_pe_features(pe):
    features = {}
    for section in pe.sections:
        entropy = calculate_entropy(bytearray(section.get_data()))
        features[f'{section.Name.decode().rstrip("\\x00")}_entropy'] = entropy
    return features

def main(malware_samples):
    data = []
    for file_name in os.listdir(malware_samples):
        file_path = os.path.join(malware_samples, file_name)
        features = extract_features(file_path)
        features['Label'] = 'Malicious'  # or 'Benign'
        data.append(features)
    
    df = pd.DataFrame(data)
    df.to_csv('malware_features.csv', index=False)
    print("Feature extraction completed and saved to 'malware_features.csv'.")

if __name__ == "__main__":
    malware_samples = 'path/to/malware/samples'
    main(malware_samples)
